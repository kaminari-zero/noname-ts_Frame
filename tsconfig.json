{
    "compilerOptions": {
        "target": "es5", //指定ECMAScript目标版本
        "removeComments": true, //删除注释
        "experimentalDecorators": true, //启用实验性的ES装饰器。
        "emitDecoratorMetadata": true, //给源码里的装饰器声明加上设计类型元数据
        // "preserveConstEnums": true, //保留 const和 enum声明
        // "outFile": "./build/extension.js", //编译后输出的文件，输出文件合并成一个指定js，为了方便，集中编译在一起，
        "outFile":"./build/exsrc/ZJ联盟杀/extension.js", //才用这种方式指定输出到一个指定文件夹内（下面include也要对应改）
        // "outFile":"./build/exsrc/加载测试扩展/extension.js", //才用这种方式指定输出到一个指定文件夹内（下面include也要对应改）
        // "outDir":"./build", //指定编译后文件输出的位置，输出的文件不合并
        // "outDir":"extension", 
        // "sourceRoot": "./exsrc/", //源文件路径
        "sourceMap": true,
        // "rootDir": "./exsrc/", //根目录（跟sourceRoot一致就行）
        // "noImplicitAny": true, //在表达式和声明上有隐含的 any类型时报错
        // "module": "none",  //模块化的风格，none，CommonJS，AMD......
        //增加这个，即使在es5的情况下，也能调用es6的方法提示（不过不能使用es6新语法，这个用ts代替就行了）
        // "noUnusedParameters":false, //若有未使用的参数则抛错。
        //加上这两个，可以防止lib之间的命名冲突之类的问题无法通过编译
        // "skipLibCheck": true,
        // "allowSyntheticDefaultImports": true,

        "lib": [
            "es5",
            "es2015.core",
			"es2015.collection",
			"es2015.generator",
            "es2015.promise",
			"es2015.iterable",
			"es2015.proxy",
			"es2015.reflect",
			"es2015.symbol",
			"es2015.symbol.wellknown",
            "dom",
			"dom.iterable"
        ]
    },
    //编译目录
    "include": [ 
        "interface",
        "exsrc/Utils",
        
        //这样时编译所有
        // "exsrc/*"
        //采用第二种方式时，需要自己指定编译文件的具体路径：
        // zj联盟杀：
        "exsrc/ZJ联盟杀",
        // "exsrc/测试代码"
        // "exsrc/加载测试扩展"
        // 注：目前还不知道怎么把一个文件夹当做一个模块打包，故同一项目，放多个扩展的时候，需要编译哪个扩展，就在这里手动切换改动一下
    ],
    //排除编译：
    "exclude": [
        "exsrc/测试代码"
    ]
}